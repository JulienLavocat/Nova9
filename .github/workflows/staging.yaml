name: Staging release
on:
  push:
    branches:
      - staging
env:
  binary: client
  spacetimedb_version: 1.2.0

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  generate-version:
    name: Generate version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.release.outputs.version }}
    steps:
      - uses: actions/checkout@main
        with:
          fetch-depth: 0
      - name: Conventional commits check
        uses: cocogitto/cocogitto-action@v3
        id: release
        with:
          release: true
          git-user: "Release Bot"
          git-user-email: "release-bot@nova9.com"
      - name: Generate Changelog
        run: cog changelog --at ${{ steps.release.outputs.version }} -t full_hash > GITHUB_CHANGELOG.md
      - name: Upload github release
        uses: softprops/action-gh-release@v1
        with:
          body_path: GITHUB_CHANGELOG.md
          tag_name: ${{ steps.release.outputs.version }}

  publish-spacetimedb:
    name: "Publish SpacetimeDB module"
    runs-on: ubuntu-latest
    needs:
      - release-linux
      - release-windows
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
      - name: "Install Binaryen"
        run: sudo apt-get -y install binaryen
      - name: Install SpacetimeDB
        run: curl -sSf https://install.spacetimedb.com | sh -s -- --yes
      - name: Set SpacetimeDB version
        run: spacetime version install ${{ env.spacetimedb_version }} && spacetime version use ${{ env.spacetimedb_version }}
      - name: Setup token
        run: spacetime login --token ${{ secrets.SPACETIMEDB_ADMIN_TOKEN }}
      - name: Publish server
        run: spacetime publish -s maincloud -p server -y nova9-staging -c

  release-linux:
    needs:
      - generate-version
    runs-on: "ubuntu-latest"
    name: Buiild Linux client
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu
      - name: install dependencies
        run: |
          sudo apt-get update; sudo apt-get install pkg-config libx11-dev libasound2-dev libudev-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev
      - name: Build
        run: |
          cargo build --release --target x86_64-unknown-linux-gnu -p client
      - name: Prepare package
        run: |
          mkdir linux
          cp target/x86_64-unknown-linux-gnu/release/${{ env.binary }} linux/
          cp -r client/assets linux/ || true # Try to copy, but ignore if it can't copy if source directory does not exist
      - name: Package as a zip
        working-directory: ./linux
        run: |
          zip --recurse-paths ../${{ env.binary }}-linux-${{ needs.generate-version.outputs.version }}.zip .
      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.binary }}-linux-${{ needs.generate-version.outputs.version }}.zip
          name: linux
          retention-days: 1
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.binary }}-linux-${{ needs.generate-version.outputs.version }}.zip
          asset_name: ${{ env.binary }}-linux-${{ needs.generate-version.outputs.version }}.zip
          tag: ${{ needs.generate-version.outputs.version }}
          overwrite: true

  release-windows:
    needs:
      - generate-version
    runs-on: windows-latest
    name: Build Windows client
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Build
        run: |
          cargo build --release --target x86_64-pc-windows-msvc -p client

      - name: Prepare package
        run: |
          mkdir windows
          cp target/x86_64-pc-windows-msvc/release/${{ env.binary }}.exe windows/
          mkdir assets -ea 0 # create the assets directory if it does not exist, it will get ignored in the zip if empty
          cp -r client/assets windows/

      - name: Package as a zip
        run: |
          Compress-Archive -Path windows/* -DestinationPath ${{ env.binary }}-windows-${{ needs.generate-version.outputs.version }}.zip

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.binary }}-windows-${{ needs.generate-version.outputs.version }}.zip
          name: windows
          retention-days: 1

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.binary }}-windows-${{ needs.generate-version.outputs.version }}.zip
          asset_name: ${{ env.binary }}-windows-${{ needs.generate-version.outputs.version }}.zip
          tag: ${{ needs.generate-version.outputs.version }}
          overwrite: true

  publish-steam:
    needs:
      - generate-version
      - release-windows
      - release-linux
      - publish-spacetimedb
    runs-on: ubuntu-latest
    name: Publish to Steam
    steps:
      - uses: actions/download-artifact@v4
        with:
          run-id: 16746979730
          path: ./builds
          merge-multiple: true
      - run: ls -la builds
      - name: Unzip all builds
        run: |
          unzip builds/${{ env.binary }}-linux-${{ needs.generate-version.outputs.version }}.zip -d builds/linux 
          unzip builds/${{ env.binary }}-windows-${{ needs.generate-version.outputs.version }}.zip -d builds/windows
      - uses: CyberAndrii/steam-totp@v1
        name: Generate TOTP
        id: steam-totp
        with:
          shared_secret: ${{ secrets.STEAM_SHARED_SECRET }}
      - uses: JulienLavocat/steam-deploy@7633162c2c55c0d33c1907d644d232882881129d
        with:
          username: ${{ secrets.STEAM_USERNAME }}
          password: ${{ secrets.STEAM_PASSWORD }}
          totp: ${{ steps.steam-totp.outputs.code }}
          appId: 3927240
          buildDescription: v${{ needs.generate-version.outputs.version }}
          rootPath: builds
          depot1Path: windows
          depot2Path: linux
          releaseBranch: staging

  publish-itch:
    name: Publish to Itch.io
    runs-on: ubuntu-latest
    needs:
      - generate-version
      - release-linux
      - release-windows
      - publish-spacetimedb
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./builds
      - name: Install butler
        run: |
          curl -L -o butler.zip https://broth.itch.ovh/butler/linux-amd64/LATEST/archive/default
          unzip butler.zip
          chmod +x butler
          ./butler -V
      - name: Upload to itch.io
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_CREDENTIALS }}
        run: |
          for channel in $(ls builds); do
            ./butler push \
                --fix-permissions \
                --userversion="${{ needs.generate-version.outputs.version }}" \
                builds/$channel/* \
                beerbag/nova-9:$channel
          done
