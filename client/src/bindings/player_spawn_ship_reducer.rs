// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.2.0 (commit ).

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

#[derive(__lib::ser::Serialize, __lib::de::Deserialize, Clone, PartialEq, Debug)]
#[sats(crate = __lib)]
pub(super) struct PlayerSpawnShipArgs {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub rot_x: f32,
    pub rot_y: f32,
    pub rot_z: f32,
    pub rot_w: f32,
}

impl From<PlayerSpawnShipArgs> for super::Reducer {
    fn from(args: PlayerSpawnShipArgs) -> Self {
        Self::PlayerSpawnShip {
            x: args.x,
            y: args.y,
            z: args.z,
            rot_x: args.rot_x,
            rot_y: args.rot_y,
            rot_z: args.rot_z,
            rot_w: args.rot_w,
        }
    }
}

impl __sdk::InModule for PlayerSpawnShipArgs {
    type Module = super::RemoteModule;
}

pub struct PlayerSpawnShipCallbackId(__sdk::CallbackId);

#[allow(non_camel_case_types)]
/// Extension trait for access to the reducer `player_spawn_ship`.
///
/// Implemented for [`super::RemoteReducers`].
pub trait player_spawn_ship {
    /// Request that the remote module invoke the reducer `player_spawn_ship` to run as soon as possible.
    ///
    /// This method returns immediately, and errors only if we are unable to send the request.
    /// The reducer will run asynchronously in the future,
    ///  and its status can be observed by listening for [`Self::on_player_spawn_ship`] callbacks.
    fn player_spawn_ship(
        &self,
        x: f32,
        y: f32,
        z: f32,
        rot_x: f32,
        rot_y: f32,
        rot_z: f32,
        rot_w: f32,
    ) -> __sdk::Result<()>;
    /// Register a callback to run whenever we are notified of an invocation of the reducer `player_spawn_ship`.
    ///
    /// Callbacks should inspect the [`__sdk::ReducerEvent`] contained in the [`super::ReducerEventContext`]
    /// to determine the reducer's status.
    ///
    /// The returned [`PlayerSpawnShipCallbackId`] can be passed to [`Self::remove_on_player_spawn_ship`]
    /// to cancel the callback.
    fn on_player_spawn_ship(
        &self,
        callback: impl FnMut(&super::ReducerEventContext, &f32, &f32, &f32, &f32, &f32, &f32, &f32)
            + Send
            + 'static,
    ) -> PlayerSpawnShipCallbackId;
    /// Cancel a callback previously registered by [`Self::on_player_spawn_ship`],
    /// causing it not to run in the future.
    fn remove_on_player_spawn_ship(&self, callback: PlayerSpawnShipCallbackId);
}

impl player_spawn_ship for super::RemoteReducers {
    fn player_spawn_ship(
        &self,
        x: f32,
        y: f32,
        z: f32,
        rot_x: f32,
        rot_y: f32,
        rot_z: f32,
        rot_w: f32,
    ) -> __sdk::Result<()> {
        self.imp.call_reducer(
            "player_spawn_ship",
            PlayerSpawnShipArgs {
                x,
                y,
                z,
                rot_x,
                rot_y,
                rot_z,
                rot_w,
            },
        )
    }
    fn on_player_spawn_ship(
        &self,
        mut callback: impl FnMut(&super::ReducerEventContext, &f32, &f32, &f32, &f32, &f32, &f32, &f32)
            + Send
            + 'static,
    ) -> PlayerSpawnShipCallbackId {
        PlayerSpawnShipCallbackId(self.imp.on_reducer(
            "player_spawn_ship",
            Box::new(move |ctx: &super::ReducerEventContext| {
                let super::ReducerEventContext {
                    event:
                        __sdk::ReducerEvent {
                            reducer:
                                super::Reducer::PlayerSpawnShip {
                                    x,
                                    y,
                                    z,
                                    rot_x,
                                    rot_y,
                                    rot_z,
                                    rot_w,
                                },
                            ..
                        },
                    ..
                } = ctx
                else {
                    unreachable!()
                };
                callback(ctx, x, y, z, rot_x, rot_y, rot_z, rot_w)
            }),
        ))
    }
    fn remove_on_player_spawn_ship(&self, callback: PlayerSpawnShipCallbackId) {
        self.imp.remove_on_reducer("player_spawn_ship", callback.0)
    }
}

#[allow(non_camel_case_types)]
#[doc(hidden)]
/// Extension trait for setting the call-flags for the reducer `player_spawn_ship`.
///
/// Implemented for [`super::SetReducerFlags`].
///
/// This type is currently unstable and may be removed without a major version bump.
pub trait set_flags_for_player_spawn_ship {
    /// Set the call-reducer flags for the reducer `player_spawn_ship` to `flags`.
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    fn player_spawn_ship(&self, flags: __ws::CallReducerFlags);
}

impl set_flags_for_player_spawn_ship for super::SetReducerFlags {
    fn player_spawn_ship(&self, flags: __ws::CallReducerFlags) {
        self.imp.set_call_reducer_flags("player_spawn_ship", flags);
    }
}
