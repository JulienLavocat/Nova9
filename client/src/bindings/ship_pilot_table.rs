// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.0 (commit ).

#![allow(unused, clippy::all)]
use super::ship_pilot_type::ShipPilot;
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

/// Table handle for the table `ship_pilot`.
///
/// Obtain a handle from the [`ShipPilotTableAccess::ship_pilot`] method on [`super::RemoteTables`],
/// like `ctx.db.ship_pilot()`.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.ship_pilot().on_insert(...)`.
pub struct ShipPilotTableHandle<'ctx> {
    imp: __sdk::TableHandle<ShipPilot>,
    ctx: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

#[allow(non_camel_case_types)]
/// Extension trait for access to the table `ship_pilot`.
///
/// Implemented for [`super::RemoteTables`].
pub trait ShipPilotTableAccess {
    #[allow(non_snake_case)]
    /// Obtain a [`ShipPilotTableHandle`], which mediates access to the table `ship_pilot`.
    fn ship_pilot(&self) -> ShipPilotTableHandle<'_>;
}

impl ShipPilotTableAccess for super::RemoteTables {
    fn ship_pilot(&self) -> ShipPilotTableHandle<'_> {
        ShipPilotTableHandle {
            imp: self.imp.get_table::<ShipPilot>("ship_pilot"),
            ctx: std::marker::PhantomData,
        }
    }
}

pub struct ShipPilotInsertCallbackId(__sdk::CallbackId);
pub struct ShipPilotDeleteCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::Table for ShipPilotTableHandle<'ctx> {
    type Row = ShipPilot;
    type EventContext = super::EventContext;

    fn count(&self) -> u64 {
        self.imp.count()
    }
    fn iter(&self) -> impl Iterator<Item = ShipPilot> + '_ {
        self.imp.iter()
    }

    type InsertCallbackId = ShipPilotInsertCallbackId;

    fn on_insert(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> ShipPilotInsertCallbackId {
        ShipPilotInsertCallbackId(self.imp.on_insert(Box::new(callback)))
    }

    fn remove_on_insert(&self, callback: ShipPilotInsertCallbackId) {
        self.imp.remove_on_insert(callback.0)
    }

    type DeleteCallbackId = ShipPilotDeleteCallbackId;

    fn on_delete(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> ShipPilotDeleteCallbackId {
        ShipPilotDeleteCallbackId(self.imp.on_delete(Box::new(callback)))
    }

    fn remove_on_delete(&self, callback: ShipPilotDeleteCallbackId) {
        self.imp.remove_on_delete(callback.0)
    }
}

#[doc(hidden)]
pub(super) fn register_table(client_cache: &mut __sdk::ClientCache<super::RemoteModule>) {
    let _table = client_cache.get_or_make_table::<ShipPilot>("ship_pilot");
    _table.add_unique_constraint::<u64>("ship_id", |row| &row.ship_id);
    _table.add_unique_constraint::<__sdk::Identity>("player_id", |row| &row.player_id);
}
pub struct ShipPilotUpdateCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::TableWithPrimaryKey for ShipPilotTableHandle<'ctx> {
    type UpdateCallbackId = ShipPilotUpdateCallbackId;

    fn on_update(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row, &Self::Row) + Send + 'static,
    ) -> ShipPilotUpdateCallbackId {
        ShipPilotUpdateCallbackId(self.imp.on_update(Box::new(callback)))
    }

    fn remove_on_update(&self, callback: ShipPilotUpdateCallbackId) {
        self.imp.remove_on_update(callback.0)
    }
}

#[doc(hidden)]
pub(super) fn parse_table_update(
    raw_updates: __ws::TableUpdate<__ws::BsatnFormat>,
) -> __sdk::Result<__sdk::TableUpdate<ShipPilot>> {
    __sdk::TableUpdate::parse_table_update(raw_updates).map_err(|e| {
        __sdk::InternalError::failed_parse("TableUpdate<ShipPilot>", "TableUpdate")
            .with_cause(e)
            .into()
    })
}

/// Access to the `ship_id` unique index on the table `ship_pilot`,
/// which allows point queries on the field of the same name
/// via the [`ShipPilotShipIdUnique::find`] method.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.ship_pilot().ship_id().find(...)`.
pub struct ShipPilotShipIdUnique<'ctx> {
    imp: __sdk::UniqueConstraintHandle<ShipPilot, u64>,
    phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

impl<'ctx> ShipPilotTableHandle<'ctx> {
    /// Get a handle on the `ship_id` unique index on the table `ship_pilot`.
    pub fn ship_id(&self) -> ShipPilotShipIdUnique<'ctx> {
        ShipPilotShipIdUnique {
            imp: self.imp.get_unique_constraint::<u64>("ship_id"),
            phantom: std::marker::PhantomData,
        }
    }
}

impl<'ctx> ShipPilotShipIdUnique<'ctx> {
    /// Find the subscribed row whose `ship_id` column value is equal to `col_val`,
    /// if such a row is present in the client cache.
    pub fn find(&self, col_val: &u64) -> Option<ShipPilot> {
        self.imp.find(col_val)
    }
}

/// Access to the `player_id` unique index on the table `ship_pilot`,
/// which allows point queries on the field of the same name
/// via the [`ShipPilotPlayerIdUnique::find`] method.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.ship_pilot().player_id().find(...)`.
pub struct ShipPilotPlayerIdUnique<'ctx> {
    imp: __sdk::UniqueConstraintHandle<ShipPilot, __sdk::Identity>,
    phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

impl<'ctx> ShipPilotTableHandle<'ctx> {
    /// Get a handle on the `player_id` unique index on the table `ship_pilot`.
    pub fn player_id(&self) -> ShipPilotPlayerIdUnique<'ctx> {
        ShipPilotPlayerIdUnique {
            imp: self
                .imp
                .get_unique_constraint::<__sdk::Identity>("player_id"),
            phantom: std::marker::PhantomData,
        }
    }
}

impl<'ctx> ShipPilotPlayerIdUnique<'ctx> {
    /// Find the subscribed row whose `player_id` column value is equal to `col_val`,
    /// if such a row is present in the client cache.
    pub fn find(&self, col_val: &__sdk::Identity) -> Option<ShipPilot> {
        self.imp.find(col_val)
    }
}
